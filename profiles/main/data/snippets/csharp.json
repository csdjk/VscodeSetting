{
	// Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"///": {
		"prefix": "/",
		"body": [
			"// ================================ $0 ================================",
		],
		"description": "注释标题"
	},
	"$s": {
		"prefix": "$s",
		"body": [
			"$\"$1:{$2}\"",
		],
		"description": "String Format"
	},
	"LcLScriptEditor": {
		"prefix": "LcL Editor",
		"body": [
			"using UnityEngine;",
			"using UnityEditor;",
			"using UnityEngine.UIElements;",
			"using System;",
			"",
			"[CustomEditor(typeof(${1:LcLScript}))]",
			"public class ${1:LcLScript}Editor : Editor",
			"{",
			"\tpublic override void OnInspectorGUI()",
			"\t{",
			"\t\tbase.OnInspectorGUI();",
			"\t}",
			"",
			"\tpublic override VisualElement CreateInspectorGUI()",
			"\t{",
			"\t\tvar root = new VisualElement();",
			"\t\tvar label = new Label(\"Hello World!\");",
			"\t\troot.Add(label);",
			"",
			"\t\tFunc<VisualElement> makeItem = () =>",
			"\t\t{",
			"\t\t\treturn new Label();",
			"\t\t};",
			"\t\tAction<VisualElement, int> bindItem = (element, index) =>",
			"\t\t{",
			"\t\t\t(element as Label).text = \"Element \" + index;",
			"\t\t};",
			"",
			"\t\tvar listView = new ListView(new[] { \"1\", \"2\", \"3\", \"4\", \"5\" }, 20, makeItem, bindItem);",
			"\t\tlistView.selectionType = SelectionType.Multiple;",
			"\t\tlistView.showAddRemoveFooter = true;",
			"\t\tlistView.reorderable = true;",
			"\t\tlistView.reorderMode = ListViewReorderMode.Animated;",
			"\t\tlistView.showBorder = true;",
			"\t\tlistView.showAddRemoveFooter = true;",
			"\t\tlistView.showAlternatingRowBackgrounds = AlternatingRowBackground.None;",
			"\t\tlistView.showBoundCollectionSize = true;",
			"\t\tlistView.selectionType = SelectionType.Single;",
			"\t\tlistView.onSelectedIndicesChange += obj =>",
			"\t\t{",
			"\t\t\tDebug.Log(\"onSelectedIndicesChanged\");",
			"\t\t};",
			"\t\tlistView.onItemsChosen += obj =>",
			"\t\t{",
			"\t\t\tDebug.Log(\"onItemsChosen\");",
			"\t\t};",
			"\t\tlistView.onSelectionChange += obj =>",
			"\t\t{",
			"\t\t\tDebug.Log(\"onSelectionChange\");",
			"\t\t};",
			"\t\troot.Add(listView);",
			"\t\treturn root;",
			"\t}",
			"}"
		],
		"description": "LcLScriptEditor Template"
	},
	"LcLEditorWindow": {
		"prefix": "LcL EditorWindow",
		"body": [
			"using UnityEngine;",
			"using UnityEditor;",
			"using UnityEngine.UIElements;",
			"using System;",
			"",
			"public class ${1:LcLEditorWindow} : EditorWindow",
			"{",
			"\t[MenuItem(\"Window/${2:My Editor Window}\")]",
			"\tprivate static void ShowWindow()",
			"\t{",
			"\t\tvar window = GetWindow<${1:LcLEditorWindow}>();",
			"\t\twindow.titleContent = new GUIContent(\"${3:My Editor Window}\");",
			"\t\twindow.Show();",
			"\t}",
			"\t",
			"\tvoid OnEnable()",
			"\t{",
			"\t\tCreateGUI();",
			"\t}",
			"\t",
			"\tpublic void CreateGUI()",
			"\t{",
			"\t\tVisualElement root = rootVisualElement;",
			"\t\t",
			"\t\tvar label = new Label(\"Hello World!\");",
			"\t\troot.Add(label);",
			"\t\t",
			"\t\tvar button = new Button(() => { Debug.Log(\"Hello World\"); });",
			"\t\troot.Add(button);",
			"\t\t",
			"\t\tFunc<VisualElement> makeItem = () =>",
			"\t\t{",
			"\t\t\treturn new Label();",
			"\t\t};",
			"\t\tAction<VisualElement, int> bindItem = (element, index) =>",
			"\t\t{",
			"\t\t\t(element as Label).text = \"Element \" + index;",
			"\t\t};",
			"\t\t",
			"\t\tvar listView = new ListView(new[] { \"1\", \"2\", \"3\", \"4\", \"5\" }, 20, makeItem, bindItem);",
			"\t\tlistView.selectionType = SelectionType.Multiple;",
			"\t\tlistView.showAddRemoveFooter = true;",
			"\t\tlistView.reorderable = true;",
			"\t\tlistView.reorderMode = ListViewReorderMode.Animated;",
			"\t\tlistView.showBorder = true;",
			"\t\tlistView.showAddRemoveFooter = true;",
			"\t\tlistView.showAlternatingRowBackgrounds = AlternatingRowBackground.None;",
			"\t\tlistView.showBoundCollectionSize = true;",
			"\t\tlistView.selectionType = SelectionType.Single;",
			"\t\tlistView.onSelectedIndicesChange += obj =>",
			"\t\t{",
			"\t\t\tDebug.Log(\"onSelectedIndicesChanged\");",
			"\t\t};",
			"\t\tlistView.onItemsChosen += obj =>",
			"\t\t{",
			"\t\t\tDebug.Log(\"onItemsChosen\");",
			"\t\t};",
			"\t\tlistView.onSelectionChange += obj =>",
			"\t\t{",
			"\t\t\tDebug.Log(\"onSelectionChange\");",
			"\t\t};",
			"\t\troot.Add(listView);",
			"\t}",
			"}"
		],
		"description": "LcLEditorWindow Template"
	}
}