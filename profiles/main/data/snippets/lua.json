{
	// Place your snippets for lua here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Create Item Script": {
		"prefix": "item",
		"body": [
			"require \"Core.Module.Common.UIItem\";",
			"require \"Core.Module.Common.Phalanx\";",
			"",
			"${1:Item} = class(\"${1:Item}\", UIItem);",
			"",
			"function ${1:Item}:New()",
			"   local o = {};",
			"   setmetatable(o,self);",
			"   self.__index = self;",
			"   return o;",
			"end",
			"",
			"",
			"function ${1:Item}:_Init(gameObject)",
			"   self:_InitReference();",
			"   self:_InitListener();",
			"   self:_InitView()",
			"end",
			"",
			"function ${1:Item}:_InitReference()",
			"   self:_BindUI(true);",
			"end",
			"",
			"function ${1:Item}:_InitListener()",
			"   self:_BindListener(true);",
			"end",
			"",
			"function ${1:Item}:_DisposeListener()",
			"   self:_BindListener(false);",
			"end",
			"",
			"function ${1:Item}:_DisposeReference()",
			"   self:_BindUI(false);",
			"end",
			"",
			"function ${1:Item}:_BindUI(_isBind)",
			"",
			"end",
			"",
			"function ${1:Item}:_BindListener(_isBind)   ",
			"",
			"end",
			"",
			"function ${1:Item}:_InitView()",
			"   --UILabel2Lua.SetText(self._txtName, LanguageMgr.Get(\"KEY\"))",
			"",
			"end",
			"",
			"function ${1:Item}:_Dispose()",
			"   self:_DisposeListener()",
			"   self:_DisposeReference()",
			"end",
			"",
			"function ${1:Item}:UpdateItem(data)",
			"\tif not data then",
			"\t\treturn",
			"\tend",
			"\tself.data = data",
			"\tself._InitView()",
			"end",
		],
		"description": "Create Item Script"
	},
	"Create Info Script": {
		"prefix": "info",
		"body": [
			"${1:Info} = class(\"${1:Info}\")",
			"",
			"function ${1:Info}:New(cfgInfo)",
			"   self = {}",
			"   setmetatable(self, {__index = ${1:Info}})",
			"   self:_Init(cfgInfo)",
			"   return self",
			"end",
			"",
			"function ${1:Info}:_Init(cfgInfo)",
			"   ConfigManager.copyTo(cfgInfo, self)",
			"end",
		],
		"description": "Create Info Script"
	},
	"Create Panel Script": {
		"prefix": "panel",
		"body": [
			"require \"Core.Module.Common.Panel\";",
			"",
			"${1:SettingChangeNamePanel} = Panel:New();",
			"",
			"function ${1:Item}:_Init(gameObject)",
			"   self:_InitReference();",
			"   self:_InitListener();",
			"   self:_InitView()",
			"end",
			"",
			"function ${1:Item}:_InitReference()",
			"   self:_BindUI(true);",
			"end",
			"",
			"function ${1:Item}:_InitListener()",
			"   self:_BindListener(true);",
			"end",
			"",
			"function ${1:Item}:_DisposeListener()",
			"   self:_BindListener(false);",
			"end",
			"",
			"function ${1:Item}:_DisposeReference()",
			"   self:_BindUI(false);",
			"end",
			"",
			"function ${1:Item}:_BindUI(_isBind)",
			"",
			"end",
			"",
			"function ${1:Item}:_BindListener(_isBind)   ",
			"",
			"end",
			"",
			"function ${1:Item}:_InitView()",
			"   --UILabel2Lua.SetText(self._txtName, LanguageMgr.Get(\"KEY\"))",
			"",
			"end",
			"",
			"function ${1:Item}:_Dispose()",
			"   self:_DisposeListener()",
			"   self:_DisposeReference()",
			"end",
			"",
		],
		"description": "Create Panel Script"
	},
	"Getter And Setter": {
		"prefix": "getter",
		"body": [
			"local myValue = 0",
			"function TopAresDataManager.SetMyValue(value)",
			"\tmyValue = value",
			"end",
			"function TopAresDataManager.GetMyValue()",
			"\treturn myValue",
			"end",
			"",
		],
		"description": "Create getter"
	},
	"phalanx Scripts": {
		"prefix": "phalanx",
		"body": [
			"if not self.phalanx then",
			"\tself.phalanx = Phalanx:New()",
			"\tself.phalanx:Init(self._phalanx, Item)",
			"end",
			"self.phalanx:Build(#list, 1, list)",
			"self._Grid:Reposition()",
			"self._scrollView:ResetPosition()",
		],
		"description": "Create phalanx"
	},
	"dataManager Scripts": {
		"prefix": "dataManager",
		"body": [
			"require \"Core.Module.Pattern.Notifier\";",
			"require \"Core.Module.ModuleFile.Info.DataInfo\"",
			"DataManager = Notifier:New();",
			"local this = DataManager",
			"",
			"function DataManager.Init(isDispose)",
			"if isDispose then",
			"this._Clear()",
			"return",
			"end",
			"this.InitData()",
			"end",
			"",
			"local infoList",
			"function DataManager.InitData()",
			"infoList = {}",
			"local conf = ConfigManager.GetConfig(ConfigManager.CONFIGNAME_SIGN)",
			"for i, v in pairs(conf) do",
			"local info = Info:New(v)",
			"infoList[v.key",
			"] = info",
			"end",
			"end",
			"",
			"-----------------------同步数据-----------------------",
			"function DataManager.SyncData()",
			"",
			"end",
			"",
			"function DataManager._Clear()",
			"infoList = nil",
			"end",
		],
		"description": "Create dataManager"
	},
	"help Scripts": {
		"prefix": "helpScripts",
		"body": [
			"local msg = ConfigManager.GetClientMsgById(64601)",
			"local pos = go.transform:TransformPoint(Vector3.New(-50, 0, 0))",
			"local data = {",
			"\ts_content = msg,",
			"\tu_posX = pos.x,",
			"\tu_posY = pos.y,",
			"\tu_direction = 1 -- 方向，-1：左边 1：右边",
			"}",
			"UtilityDataManager.ShowNormalTip(data)",
		],
		"description": "Create Help Scripts"
	},
	"start Timer Scripts": {
		"prefix": "startTimerScripts",
		"body": [
			"function Panel:_StartTimer()",
			"\tlocal func = function ()",
			"\t\t",
			"\tend",
			"\tself.timer = Timer.New(func,0.1,-1)",
			"\tself.timer:Start()",
			"end",
			"function Panel:_StopTimer()",
			"\tif self.timer then",
			"\t\tself.timer:Start()",
			"\t\tself.timer = nil",
			"\tend",
			"end ",
		],
		"description": "Create Timer Scripts"
	},
	"OnClick Scripts": {
		"prefix": "OnClickScripts",
		"body": [
			"if _isBind then",
			"self._onBtnOnClick = function(go) self:_OnBtnClick(self) end;",
			"else ",
			"self._onBtnOnClick = nil;",
			"end",
			"self:_BindBtnListener(_isBind,self.transform, \"OnClick\", true, self._onBtnOnClick);",
		],
		"description": "Create OnClick Scripts"
	},
}